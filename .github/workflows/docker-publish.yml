name: Docker Publish
env: { STAGE_PORT: 8081, CONTAINER_PORT: 8080, PRODUCTION_PORT: 8082 }
on:
  workflow_dispatch:
jobs:
  server-test:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Get the code
        uses: actions/checkout@v4
      - name: ‚öôÔ∏è Load & Cache Dependencies
        uses: ./.github/actions/cached-deps
        with:
          prefix: .
          caching: "false"
      - name: üß™ Test Auth Service
        run: npm run test-auth:ci
      - name: üß™ Test Common Service
        run: npm run test-common:ci
  dockerize-and-publish:
    needs: [server-test]
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Get the code
        uses: actions/checkout@v4
      - name: üêü Build stage image
        run: docker build -f Dockerfile.prod -t "${{ secrets.WF_DOCKER_STAGE_IMAGE_NAME }}" . --build-arg MONGO_URI="${{ secrets.WF_MONGODB_STAGE_URI }}" --build-arg NODE_ENV="production" --build-arg DATABASE="${{ secrets.WF_MONGODB_STAGE_DATABASE_NAME }}" --build-arg ADMIN_PASSWORD="${{ secrets.WF_ADMIN_PASSWORD_STAGE }}"
      - name: üêü Build production image
        run: docker build -f Dockerfile.prod -t "${{ secrets.WF_DOCKER_PRODUCTION_IMAGE_NAME }}" . --build-arg MONGO_URI="${{ secrets.WF_MONGODB_PRODUCTION_URI }}" --build-arg NODE_ENV="production" --build-arg DATABASE="${{ secrets.WF_MONGODB_PRODUCTION_DATABASE_NAME }}" --build-arg ADMIN_PASSWORD="${{ secrets.WF_ADMIN_PASSWORD_PRODUCTION }}"
      - name: üè° Run stage image
        run: docker run -d -p ${{ env.STAGE_PORT }}:${{ env.CONTAINER_PORT }} ${{ secrets.WF_DOCKER_STAGE_IMAGE_NAME }}
      - name: üè° Run production image
        run: docker run -d -p ${{ env.PRODUCTION_PORT }}:${{ env.CONTAINER_PORT }} ${{ secrets.WF_DOCKER_PRODUCTION_IMAGE_NAME }}
      - name: üí§ Sleep for 30 seconds
        run: sleep 30
      - name: üìû Calling stage api
        run: curl http://localhost:${{ env.STAGE_PORT }}/api/currentuser
      - name: üìû Calling production api
        run: curl http://localhost:${{ env.PRODUCTION_PORT }}/api/currentuser
      - name: 2Ô∏è‚É£ Docker stage account login
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        env:
          DOCKER_USERNAME: ${{ secrets.WF_DOCKER_STAGE_ACCOUNT_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.WF_DOCKER_STAGE_ACCOUNT_PASSWORD }}
      - name: üå©Ô∏è Push stage image to docker hub
        run: docker push ${{ secrets.WF_DOCKER_STAGE_IMAGE_NAME }}
      - name: 2Ô∏è‚É£ Docker stage account logout
        run: docker logout
      - name: 1Ô∏è‚É£ Docker production account login
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        env:
          DOCKER_USERNAME: ${{ secrets.WF_DOCKER_PRODUCTION_ACCOUNT_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.WF_DOCKER_PRODUCTION_ACCOUNT_PASSWORD }}
      - name: üå©Ô∏è Push production image to docker hub
        run: docker push ${{ secrets.WF_DOCKER_PRODUCTION_IMAGE_NAME }}
      - name: 1Ô∏è‚É£ Docker production account logout
        run: docker logout
      - name: üí¨ Sending Notification
        uses: stegzilla/discord-notify@v4
        with:
          title: dockerize
          include_image: true
          username: ${{ github.actor }}
          message: ‚úÖ Docker images published!
          webhook_url: ${{ secrets.WF_DISCORD_WEBHOOK_URL }}
          avatar_url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
