name: Docker Publish
env: { PORT: 8080, Group: Blank }
on:
  workflow_dispatch:
jobs:
  # client-test:
  #   runs-on: ubuntu-latest
  #   env:
  #     CI: true # for non-watch test mode
  #   steps:
  #     - name: ‚¨áÔ∏è Get the code
  #       uses: actions/checkout@v3
  #     - name: ‚öôÔ∏è Load & Cache Dependencies
  #       uses: ./.github/actions/cached-deps
  #       with:
  #         prefix: client
  #     - name: üß™ Test
  #       run: npm run test --prefix client
  client-build:
    # needs: [client-test]
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Get the code
        uses: actions/checkout@v3
      - name: ‚öôÔ∏è Load & Cache Dependencies
        uses: ./.github/actions/cached-deps
        with:
          prefix: client
      - name: Build
        run: npm run build --prefix client
  server-test:
    needs: [client-build]
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Get the code
        uses: actions/checkout@v3
      - name: ‚öôÔ∏è Load & Cache Dependencies
        uses: ./.github/actions/cached-deps
        with:
          prefix: .
      - name: Test
        run: npm run test:ci
  server-build:
    needs: [server-test]
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Get the code
        uses: actions/checkout@v3
      - name: ‚öôÔ∏è Load & Cache Dependencies
        uses: ./.github/actions/cached-deps
        with:
          prefix: .
      - name: Build
        run: npm run build
  dockerize:
    needs: [server-build]
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Get the code
        uses: actions/checkout@v3
      - name: ‚öôÔ∏è Load & Cache Dependencies for client
        uses: ./.github/actions/cached-deps
        with:
          prefix: client
      - name: üë§ Build client
        run: npm run build --prefix client
      - name: ‚öôÔ∏è Load & Cache Dependencies for server
        uses: ./.github/actions/cached-deps
        with:
          prefix: .
      - name: üíø Build Server
        run: npm run build
      - name: üêü Building docker image
        run: |
          docker build \
            --build-arg DB_USERNAME=${{ secrets.MONGODB_USERNAME }} \
            --build-arg DB_PASSWORD=${{ secrets.MONGODB_PASSWORD }} \
            --build-arg FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
            --build-arg FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }} \
            --build-arg FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }} \
            -t ${{ secrets.DOCKER_IMAGE_NAME }} .
      - name: Run the docker image locally
        run: docker run -d -p ${{ env.PORT }}:${{ env.PORT }} ${{ secrets.DOCKER_IMAGE_NAME }}
      - name: Sleep for 1 minute
        run: sleep 60
      - name: Calling the api
        run: curl http://localhost:${{ env.PORT }}/api
  uploading-docker-image:
    needs: [dockerize]
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Get the code
        uses: actions/checkout@v3
      - name: ‚öôÔ∏è Load & Cache Dependencies for client
        uses: ./.github/actions/cached-deps
        with:
          prefix: client
      - name: üë§ Build client
        run: npm run build --prefix client
      - name: ‚öôÔ∏è Load & Cache Dependencies for server
        uses: ./.github/actions/cached-deps
        with:
          prefix: .
      - name: üíø Build Server
        run: npm run build
      - name: üêü Building docker image
        run: |
          docker build \
            --build-arg DB_USERNAME=${{ secrets.MONGODB_USERNAME }} \
            --build-arg DB_PASSWORD=${{ secrets.MONGODB_PASSWORD }} \
            --build-arg FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
            --build-arg FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }} \
            --build-arg FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }} \
            -t ${{ secrets.DOCKER_IMAGE_NAME }} .
      - name: Run the docker image locally
        run: docker run -d -p ${{ env.PORT }}:${{ env.PORT }} ${{ secrets.DOCKER_IMAGE_NAME }}
      - name: Sleep for 1 minute
        run: sleep 60
      - name: Calling the api
        run: curl http://localhost:${{ env.PORT }}/api
      # Docker push begins
      - name: Docker login
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push image to docker
        run: docker push ${{ secrets.DOCKER_IMAGE_NAME }}
      - name: Message
        run: echo "${{ steps.render-deployer.outputs.response }}"
