name: CI
env: { PORT: 8080, Group: CI }
on:
  workflow_dispatch:
  push:
    branches:
      - "feature-*"
jobs:
  # client-test:
  #   runs-on: ubuntu-latest
  #   env:
  #     CI: true # for non-watch test mode
  #   steps:
  #     - name: ⬇️ Get the code
  #       uses: actions/checkout@v3
  #     - name: ⚙️ Load & Cache Dependencies
  #       uses: ./.github/actions/cached-deps
  #       with:
  #         prefix: client
  #     - name: 🧪 Test
  #       run: npm run test --prefix client
  client-build:
    # needs: [client-test]
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Get the code
        uses: actions/checkout@v3
      - name: ⚙️ Load & Cache Dependencies
        uses: ./.github/actions/cached-deps
        with:
          prefix: client
      - name: Build
        run: npm run build --prefix client
  server-test:
    needs: [client-build]
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Get the code
        uses: actions/checkout@v3
      - name: ⚙️ Load & Cache Dependencies
        uses: ./.github/actions/cached-deps
        with:
          prefix: .
      - name: Test
        run: npm run test:ci
  server-build:
    needs: [server-test]
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Get the code
        uses: actions/checkout@v3
      - name: ⚙️ Load & Cache Dependencies
        uses: ./.github/actions/cached-deps
        with:
          prefix: .
      - name: Build
        run: npm run build
  dockerize:
    needs: [server-build]
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Get the code
        uses: actions/checkout@v3
      - name: ⚙️ Load & Cache Dependencies for client
        uses: ./.github/actions/cached-deps
        with:
          prefix: client
      - name: 👤 Build client
        run: npm run build --prefix client
      - name: ⚙️ Load & Cache Dependencies for server
        uses: ./.github/actions/cached-deps
        with:
          prefix: .
      - name: 💿 Build Server
        run: npm run build
      - name: 🐟 Building docker image
        run: docker build --build-arg DB_USERNAME=${{ secrets.MONGODB_USERNAME }} --build-arg DB_PASSWORD=${{ secrets.MONGODB_PASSWORD }} -t ${{ secrets.DOCKER_IMAGE_NAME }} .
      - name: Run the docker image locally
        run: docker run -d -p ${{ env.PORT }}:${{ env.PORT }} ${{ secrets.DOCKER_IMAGE_NAME }}
      - name: Sleep for 1 minute
        run: sleep 60
      - name: Calling the api
        run: curl http://localhost:${{ env.PORT }}/api
