name: Production
env: { CONTAINER_PORT: 8080, PRODUCTION_PORT: 9092 }
on:
  workflow_dispatch:
  pull_request:
    branches: [production]
    types: [closed]
jobs:
  merge_check:
    runs-on: ubuntu-latest
    outputs:
      merged: ${{ github.event.pull_request.merged }}
    steps:
      - name: Check Pull Request Merge
        run: echo "Ran the code"
  server-test:
    needs: merge_check
    if: needs.merge_check.outputs.merged == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Get the code
        uses: actions/checkout@v4
      - name: ‚öôÔ∏è Load & Cache Dependencies
        uses: ./.github/actions/cached-deps
        with:
          prefix: .
          caching: "false"
      - name: üß™ Test Auth Service
        run: npm run test-auth:ci
      - name: üß™ Test Common Service
        run: npm run test-common:ci
  dockerize-and-publish:
    needs: [server-test]
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Get the code
        uses: actions/checkout@v4
      - name: üêü Build production image
        run: |
          docker build -f Dockerfile.prod -t "${{ secrets.WF_DOCKER_PRODUCTION_IMAGE_NAME }}" . \
          --build-arg NODE_ENV="production" \
          --build-arg MONGO_URI="${{ secrets.WF_MONGODB_PRODUCTION_URI }}" \
          --build-arg BACKEND_URL="${{ secrets.WF_BACKEND_PRODUCTION_URL }}" \
          --build-arg ADMIN_PASSWORD="${{ secrets.WF_ADMIN_PASSWORD_PRODUCTION }}" \
          --build-arg DATABASE="${{ secrets.WF_MONGODB_PRODUCTION_DATABASE_NAME }}"
      - name: üè° Run production image
        run: docker run -d -p ${{ env.PRODUCTION_PORT }}:${{ env.CONTAINER_PORT }} ${{ secrets.WF_DOCKER_PRODUCTION_IMAGE_NAME }}
      - name: üí§ Sleep for 30 seconds
        run: sleep 30
      - name: üìû Calling production api
        run: curl http://localhost:${{ env.PRODUCTION_PORT }}/api/currentuser
      - name: 1Ô∏è‚É£ Docker production account login
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        env:
          DOCKER_USERNAME: ${{ secrets.WF_DOCKER_PRODUCTION_ACCOUNT_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.WF_DOCKER_PRODUCTION_ACCOUNT_PASSWORD }}
      - name: üå©Ô∏è Push production image to docker hub
        run: docker push ${{ secrets.WF_DOCKER_PRODUCTION_IMAGE_NAME }}
      - name: 1Ô∏è‚É£ Docker production account logout
        run: docker logout
      - name: ‚ö†Ô∏è Production Deploy Trigger
        id: render-production-deployer
        uses: OneHox/render-deploy-api@v1.0.0
        with:
          serviceId: ${{ secrets.WF_RENDER_PRODUCTION_APP_SERVICE_ID }}
          bearer: ${{ secrets.WF_RENDER_PRODUCTION_PROFILE_AUTH_API_TOKEN }}
      - name: üí¨ Sending Notification
        uses: stegzilla/discord-notify@v4
        with:
          title: dockerize
          include_image: true
          username: ${{ github.actor }}
          message: ‚úÖ Application Productioned!
          webhook_url: ${{ secrets.WF_DISCORD_WEBHOOK_URL }}
          avatar_url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
